const fs = require('fs')
const readline = require('readline')

// Fichier de sauvegarde des t√¢ches
const FICHIER_TACHES = './taches.json'

// Liste des t√¢ches (structure inspir√©e de l'exemple)
let taches = []
let prochainId = 1

// Interface readline pour l'interaction console
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
})

// Structure d'une t√¢che (exemple fourni)
const creerTache = (description) => {
    return {
        id: prochainId++,
        description: description,
        status: "√† faire"
    }
}

// Fonction pour ajouter une t√¢che
function ajouterTache(description) {
    const nouvelleTache = creerTache(description)
    taches.push(nouvelleTache)
    console.log(`T√¢che ajout√©e : "${description}" (ID: ${nouvelleTache.id})`)
    sauvegarderTaches()
}

// Fonction pour voir la liste des t√¢ches
function voirTaches(filtre = 'toutes') {
    let tachesFiltrees = []
    
    switch(filtre) {
        case 'faites':
            tachesFiltrees = taches.filter(t => t.status === "faite")
            break
        case 'non-faites':
            tachesFiltrees = taches.filter(t => t.status === "√† faire")
            break
        default:
            tachesFiltrees = taches
    }

    if (tachesFiltrees.length === 0) {
        console.log(`Aucune t√¢che ${filtre === 'toutes' ? '' : filtre} trouv√©e.`);
        return
    }

    console.log(`\nListe des t√¢ches ${filtre === 'toutes' ? '' : '(' + filtre + ')'} :`)
    console.log('=====================================')
    
    tachesFiltrees.forEach(tache => {
        const statut = tache.status === "faite" ? "‚úÖ" : "‚è≥"
        console.log(`${statut} [${tache.id}] ${tache.description} (${tache.status})`)
    })
    console.log('=====================================\n')
}

// Fonction pour marquer une t√¢che comme faite (inspir√©e de l'exemple)
function terminerTache(id) {
    const tache = taches.find(t => t.id === id)
    if (tache) {
        if (tache.status === "faite") {
            console.log(`La t√¢che "${tache.description}" est d√©j√† marqu√©e comme faite.`)
        } else {
            tache.status = "faite"
            console.log(`T√¢che termin√©e : "${tache.description}"`)
            sauvegarderTaches()
        }
    } else {
        console.log(`Aucune t√¢che trouv√©e avec l'ID ${id}.`)
    }
}

// Fonction pour supprimer une t√¢che
function supprimerTache(id) {
    const index = taches.findIndex(t => t.id === id)
    if (index !== -1) {
        const tacheSupprimee = taches[index]
        taches.splice(index, 1)
        console.log(`T√¢che supprim√©e : "${tacheSupprimee.description}"`)
        sauvegarderTaches()
    } else {
        console.log(`Aucune t√¢che trouv√©e avec l'ID ${id}.`)
    }
}

// Fonction pour sauvegarder les t√¢ches dans un fichier JSON
function sauvegarderTaches() {
    try {
        const donneesJson = JSON.stringify(taches, null, 2)
        fs.writeFileSync(FICHIER_TACHES, donneesJson)
        console.log('T√¢ches sauvegard√©es.')
    } catch (erreur) {
        console.error('Erreur lors de la sauvegarde :', erreur.message)
    }
}

// Fonction pour recharger les t√¢ches depuis le fichier JSON
function rechargerTaches() {
    try {
        if (fs.existsSync(FICHIER_TACHES)) {
            const donnees = fs.readFileSync(FICHIER_TACHES, 'utf8')
            taches = JSON.parse(donnees)
            
            // Mettre √† jour le prochain ID
            if (taches.length > 0) {
                prochainId = Math.max(...taches.map(t => t.id)) + 1
            }
            
            console.log(`üìÇ ${taches.length} t√¢che(s) recharg√©e(s) depuis le fichier.`)
        } else {
            console.log('üìÅ Aucun fichier de sauvegarde trouv√©. D√©marrage avec une liste vide.')
        }
    } catch (erreur) {
        console.error('Erreur lors du rechargement :', erreur.message)
        taches = []
    }
}

// Fonction pour afficher le menu
function afficherMenu() {
    console.log('\nGESTIONNAIRE DE T√ÇCHES')
    console.log('==========================')
    console.log('1. Ajouter une t√¢che')
    console.log('2. Voir toutes les t√¢ches')
    console.log('3. Voir les t√¢ches faites')
    console.log('4. Voir les t√¢ches non faites')
    console.log('5. Marquer une t√¢che comme faite')
    console.log('6. Supprimer une t√¢che')
    console.log('7. Quitter')
    console.log('==========================')
}

// Fonction pour traiter le choix de l'utilisateur
function traiterChoix(choix) {
    switch(choix) {
        case '1':
            rl.question('üìù Entrez la description de la t√¢che : ', (description) => {
                if (description.trim()) {
                    ajouterTache(description.trim())
                } else {
                    console.log('La description ne peut pas √™tre vide.')
                }
                lancerMenu()
            })
            break;
            
        case '2':
            voirTaches('toutes')
            lancerMenu()
            break;
            
        case '3':
            voirTaches('faites')
            lancerMenu()
            break;
            
        case '4':
            voirTaches('non-faites')
            lancerMenu()
            break;
            
        case '5':
            rl.question('üéØ Entrez l\'ID de la t√¢che √† marquer comme faite : ', (id) => {
                const idNum = parseInt(id)
                if (!isNaN(idNum)) {
                    terminerTache(idNum)
                } else {
                    console.log('Veuillez entrer un ID valide.')
                }
                lancerMenu()
            })
            break;
            
        case '6':
            rl.question('üóëÔ∏è  Entrez l\'ID de la t√¢che √† supprimer : ', (id) => {
            const idNum = parseInt(id)
                if (!isNaN(idNum)) {
                    supprimerTache(idNum)
                } else {
                    console.log('Veuillez entrer un ID valide.')
                }
                lancerMenu()
            })
            break;
            
        case '7':
            console.log('Au revoir !')
            rl.close()
            break;
            
        default:
            console.log('Choix invalide. Veuillez s√©lectionner une option entre 1 et 7.')
            lancerMenu()
    }
}

// Fonction pour lancer le menu interactif
function lancerMenu() {
    afficherMenu()
    rl.question('Votre choix : ', traiterChoix)
}

// Fonction principale
function main() {
    console.log('D√©marrage du gestionnaire de t√¢ches...\n')
    
    // Recharger les t√¢ches automatiquement au d√©marrage
    rechargerTaches()
    
    // Lancer le menu interactif
    lancerMenu()
}

// D√©marrer l'application
main(); 